// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/block/pb/block.proto

package blockpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pb1 "github.com/iost-official/go-iost/core/tx/pb"
	pb "github.com/iost-official/go-iost/crypto/pb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockType int32

const (
	BlockType_NORMAL   BlockType = 0
	BlockType_ONLYHASH BlockType = 1
)

var BlockType_name = map[int32]string{
	0: "NORMAL",
	1: "ONLYHASH",
}

var BlockType_value = map[string]int32{
	"NORMAL":   0,
	"ONLYHASH": 1,
}

func (x BlockType) String() string {
	return proto.EnumName(BlockType_name, int32(x))
}

func (BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6664e18d413fc7, []int{0}
}

type BlockHead struct {
	Version              int64    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ParentHash           []byte   `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxMerkleHash         []byte   `protobuf:"bytes,3,opt,name=txMerkleHash,proto3" json:"txMerkleHash,omitempty"`
	TxReceiptMerkleHash  []byte   `protobuf:"bytes,4,opt,name=txReceiptMerkleHash,proto3" json:"txReceiptMerkleHash,omitempty"`
	Info                 []byte   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Number               int64    `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	Witness              string   `protobuf:"bytes,7,opt,name=witness,proto3" json:"witness,omitempty"`
	Time                 int64    `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHead) Reset()         { *m = BlockHead{} }
func (m *BlockHead) String() string { return proto.CompactTextString(m) }
func (*BlockHead) ProtoMessage()    {}
func (*BlockHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6664e18d413fc7, []int{0}
}

func (m *BlockHead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHead.Unmarshal(m, b)
}
func (m *BlockHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHead.Marshal(b, m, deterministic)
}
func (m *BlockHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHead.Merge(m, src)
}
func (m *BlockHead) XXX_Size() int {
	return xxx_messageInfo_BlockHead.Size(m)
}
func (m *BlockHead) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHead.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHead proto.InternalMessageInfo

func (m *BlockHead) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHead) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHead) GetTxMerkleHash() []byte {
	if m != nil {
		return m.TxMerkleHash
	}
	return nil
}

func (m *BlockHead) GetTxReceiptMerkleHash() []byte {
	if m != nil {
		return m.TxReceiptMerkleHash
	}
	return nil
}

func (m *BlockHead) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *BlockHead) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockHead) GetWitness() string {
	if m != nil {
		return m.Witness
	}
	return ""
}

func (m *BlockHead) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Block struct {
	Head                 *BlockHead       `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Sign                 *pb.Signature    `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Txs                  []*pb1.Tx        `protobuf:"bytes,3,rep,name=txs,proto3" json:"txs,omitempty"`
	Receipts             []*pb1.TxReceipt `protobuf:"bytes,4,rep,name=receipts,proto3" json:"receipts,omitempty"`
	TxHashes             [][]byte         `protobuf:"bytes,5,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
	ReceiptHashes        [][]byte         `protobuf:"bytes,6,rep,name=receiptHashes,proto3" json:"receiptHashes,omitempty"`
	BlockType            BlockType        `protobuf:"varint,7,opt,name=blockType,proto3,enum=blockpb.BlockType" json:"blockType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6664e18d413fc7, []int{1}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHead() *BlockHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Block) GetSign() *pb.Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Block) GetTxs() []*pb1.Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Block) GetReceipts() []*pb1.TxReceipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *Block) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *Block) GetReceiptHashes() [][]byte {
	if m != nil {
		return m.ReceiptHashes
	}
	return nil
}

func (m *Block) GetBlockType() BlockType {
	if m != nil {
		return m.BlockType
	}
	return BlockType_NORMAL
}

func init() {
	proto.RegisterEnum("blockpb.BlockType", BlockType_name, BlockType_value)
	proto.RegisterType((*BlockHead)(nil), "blockpb.BlockHead")
	proto.RegisterType((*Block)(nil), "blockpb.Block")
}

func init() { proto.RegisterFile("core/block/pb/block.proto", fileDescriptor_dc6664e18d413fc7) }

var fileDescriptor_dc6664e18d413fc7 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x71, 0xed, 0x3a, 0xce, 0x24, 0x40, 0x34, 0x48, 0x68, 0xc9, 0x01, 0x59, 0x51, 0x41,
	0x16, 0xa8, 0x76, 0x15, 0x38, 0x71, 0x2b, 0xa7, 0x1c, 0xfa, 0x47, 0xda, 0xf6, 0xc2, 0xd1, 0x76,
	0x37, 0xc9, 0xaa, 0x89, 0x77, 0xb5, 0xbb, 0x01, 0xf7, 0x6b, 0xf0, 0x5d, 0xb9, 0xa3, 0x1d, 0x3b,
	0xa1, 0x45, 0x48, 0xdc, 0xf6, 0xbd, 0xf9, 0xed, 0x78, 0xde, 0x78, 0xe1, 0x4d, 0xad, 0x8c, 0x28,
	0xaa, 0x8d, 0xaa, 0xef, 0x0b, 0x5d, 0x75, 0x87, 0x5c, 0x1b, 0xe5, 0x14, 0x0e, 0x48, 0xe8, 0x6a,
	0xfa, 0x65, 0x25, 0xdd, 0x7a, 0x57, 0xe5, 0xb5, 0xda, 0x16, 0x52, 0x59, 0x77, 0xaa, 0x96, 0x4b,
	0x59, 0xcb, 0x72, 0x53, 0xac, 0xd4, 0xa9, 0x37, 0x8a, 0xda, 0x3c, 0x68, 0xa7, 0x7c, 0x03, 0x2b,
	0x57, 0x4d, 0xe9, 0x76, 0x46, 0x74, 0x4d, 0xa6, 0x9f, 0xff, 0x7f, 0xd7, 0x0f, 0xe0, 0x5a, 0x7f,
	0xd9, 0xb5, 0xdd, 0xad, 0xd9, 0xaf, 0x00, 0x86, 0x5f, 0xfd, 0xd7, 0x17, 0xa2, 0xbc, 0x43, 0x06,
	0x83, 0xef, 0xc2, 0x58, 0xa9, 0x1a, 0x16, 0xa4, 0x41, 0x16, 0xf2, 0xbd, 0xc4, 0xb7, 0x00, 0xba,
	0x34, 0xa2, 0x71, 0x8b, 0xd2, 0xae, 0xd9, 0x51, 0x1a, 0x64, 0x63, 0xfe, 0xc8, 0xc1, 0x19, 0x8c,
	0x5d, 0x7b, 0x29, 0xcc, 0xfd, 0x46, 0x10, 0x11, 0x12, 0xf1, 0xc4, 0xc3, 0x33, 0x78, 0xe5, 0x5a,
	0x2e, 0x6a, 0x21, 0xb5, 0x7b, 0x84, 0x46, 0x84, 0xfe, 0xab, 0x84, 0x08, 0x91, 0x6c, 0x96, 0x8a,
	0x1d, 0x13, 0x42, 0x67, 0x7c, 0x0d, 0x71, 0xb3, 0xdb, 0x56, 0xc2, 0xb0, 0x98, 0x46, 0xec, 0x95,
	0x9f, 0xfd, 0x87, 0x74, 0x8d, 0xb0, 0x96, 0x0d, 0xd2, 0x20, 0x1b, 0xf2, 0xbd, 0xf4, 0x5d, 0x9c,
	0xdc, 0x0a, 0x96, 0x10, 0x4f, 0xe7, 0xd9, 0xcf, 0x23, 0x38, 0xa6, 0xdc, 0xf8, 0x1e, 0xa2, 0xb5,
	0x28, 0xef, 0x28, 0xf0, 0x68, 0x8e, 0x79, 0xff, 0x2f, 0xf2, 0xc3, 0x56, 0x38, 0xd5, 0xf1, 0x04,
	0x22, 0xbf, 0x72, 0xca, 0x3e, 0x9a, 0x4f, 0x72, 0x2b, 0x57, 0xba, 0xca, 0x6f, 0xf6, 0x7f, 0x81,
	0x53, 0x15, 0xa7, 0x10, 0xba, 0xd6, 0xb2, 0x30, 0x0d, 0xb3, 0xd1, 0x3c, 0xc9, 0x5d, 0xab, 0xab,
	0xfc, 0xb6, 0xe5, 0xde, 0xc4, 0x8f, 0x90, 0x98, 0x2e, 0xa2, 0x65, 0x11, 0x01, 0x2f, 0x0f, 0x40,
	0xe7, 0xf3, 0x03, 0x80, 0x53, 0x48, 0x5c, 0xeb, 0x97, 0x20, 0x2c, 0x3b, 0x4e, 0xc3, 0x6c, 0xcc,
	0x0f, 0x1a, 0x4f, 0xe0, 0x79, 0xcf, 0xf5, 0x40, 0x4c, 0xc0, 0x53, 0x13, 0xcf, 0x60, 0x48, 0x59,
	0x6e, 0x1f, 0xb4, 0xa0, 0x95, 0xbc, 0xf8, 0x3b, 0x9d, 0xaf, 0xf0, 0x3f, 0xd0, 0x87, 0x77, 0xfd,
	0x5b, 0xf0, 0x02, 0x01, 0xe2, 0xab, 0x6b, 0x7e, 0x79, 0x7e, 0x31, 0x79, 0x86, 0x63, 0x48, 0xae,
	0xaf, 0x2e, 0xbe, 0x2d, 0xce, 0x6f, 0x16, 0x93, 0xa0, 0x8a, 0xe9, 0xe9, 0x7c, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xb4, 0x8b, 0xe6, 0x72, 0xd2, 0x02, 0x00, 0x00,
}
